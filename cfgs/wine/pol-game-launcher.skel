#!/bin/bash

## This script is used to launch Windows games by using
## the Windows Steam client in a Wine virtual desktop.
## Credit goes to iVaN, dubigrasu, and Ryochan7 for creating various portions
## of this script. Discussion of this technique is currently being done at
## https://steamcommunity.com/groups/steamuniverse/discussions/1/494632768626127072/.

##########################################
#                                        #
# User configurable variables for use in #
# this script. Replaced by wine-utils    #
#                                        #
##########################################

# Define some Wine variables for use in the script.
export WINEPREFIX="/home/steam/.PlayOnLinux/wineprefix/Steam"
export WINEDEBUG="-all"
WINEVERSION="$HOME/.PlayOnLinux/wine/linux-x86/VERSION_TMP"

# Change LD_LIBRARY_PATH to include the lib directories for the version of wine that you are running.
# Please see: issues/115
export LD_LIBRARY_PATH="$WINEVERSION/lib:$WINEVERSION/lib64:$LD_LIBRARY_PATH"
export PATH="$WINEVERSION/bin:$PATH"

# Define Steam location and game location here.
# NOTE: GAME_DIR is not used with current method. Possibly remove?
STEAM_DIR="$WINEPREFIX/drive_c/Program Files/Steam"
GAME_APPID="GAME_ID"
GAME_DIR="GAME_DIR"
GAME_EXE="GAME_EXE"

# !!! Experimental !!! gamepad support
# This may be enabled for all non-Steam Controller devices at some point
# This options will NOT be supported for mixed-controller types at this time.

# Values: [0|1]
enable_gamepad_support="0"
# Values: [xbxodrv|x360ce|koku-xinput-wine]
gamepad_support_type="koku-xinput-wine"

###########################################
#                                         #
# MAIN SCRIPT. DO NOT EDIT ANYTHING       #
# BELOW UNLESS ABSOLUTELY NECESSARY       #
#                                         #
###########################################

# Rollover the log if it gets more than a certain size
find /tmp/wine-game-log.txt -size +20M -delete

# Set log vars
RUN_LOG="/tmp/wine-game-log.txt"
DATE=$(date)

################################
# Experimental Gamepad support
################################

# For some reason, even if a gamepad is detected by the joypad
# Configuration utility in PlayOnLinux, it will not be detected in-game
# That particular issue is still being looked at.

if [[ "${enable_gamepad_support}" == "1" ]]; then

	if [[ "${gamepad_support_type}" == "xbxodrv" ]]; then

		xboxdrv \
			--detach-kernel-driver \
			--silent \
			--dbus session \
			--controller-slot 0 \
			--trigger-as-button \
			--ui-axismap x2=ABS_Z,y2=ABS_RZ \
			--ui-buttonmap A=BTN_B,B=BTN_X,X=BTN_A,TR=BTN_THUMBL,TL=BTN_MODE,GUIDE=BTN_THUMBR \
			--next-controller

	elif [[ "${gamepad_support_type}" == "x360ce" ]]; then

		# TODO - work out dll's needed. 
		# GAMEDIR will *need* to be specified above
		# The dll's will likely need placed manually 
		:

	elif [[ "${gamepad_support_type}" == "koku-xinput-wine" ]]; then
	
		# Preload the library
		export LD_PRELOAD=/usr/lib/koku-xinput-wine.so

	fi

else

	# Clean dll's and xboxdrv (if running)
	pkill xboxdrv
	rm -f ${GAME_DIR}/dinput8.dll
	rm -f ${GAME_DIR}/xinput1_9.dll
	rm -f ${GAME_DIR}/xinput1_3.dll
	rm -f ${GAME_DIR}/x360ce.exe

fi

# Obtain the resolution of the current display so the Wine virtual
# desktop will be full-screen.

cat<<- EOF>> ${RUN_LOG}

------------ Starting log ------------   
    Log: $RUN_LOG
    $DATE
    Game: $GAME_EXE
--------------------------------------

EOF

echo "Setting dimensions" >> ${RUN_LOG}
RES=$(xdpyinfo | grep "dimensions" | awk '{print $2}')
VIRT_DESK="explorer /desktop=Steam,$RES"

# Change to Steam directory and launch Wine virtual desktop.
echo "Starting virtual desktop" >> ${RUN_LOG}
cd "$STEAM_DIR"
$WINEVERSION/bin/wine $VIRT_DESK &

# Allow a little sleep time so steamcompmgr uses the virtual desktop
# window.
sleep 3

# Don't use extra libraries for other applications running in Wine.
# The virtual desktop will be used by steamcompmgr.
export LD_PRELOAD=

# Launch game from Steam. The game appid used by Steam can be found from the
# Steam store page for a game or from https://steamdb.info/.
echo "Starting $GAME_EXE"  >> ${RUN_LOG} 
env -i DISPLAY=$DISPLAY WINEPREFIX=$WINEPREFIX WINEDEBUG=$WINEDEBUG LD_LIBRARY_PATH=$LD_LIBRARY_PATH PATH=$PATH \
"$WINEVERSION/bin/wine" $VIRT_DESK "$STEAM_DIR/Steam.exe" -applaunch "$GAME_APPID" &

# Wait for application to be launched.
echo "Waiting for $GAME_EXE to start"  >> ${RUN_LOG}
until [ -n "$(pgrep -lf $GAME_EXE)" ]; do
  sleep 2
done;

if pgrep -lf $GAME_EXE; then
	echo "$GAME_EXE has started"  >> ${RUN_LOG}
fi

echo "Looping until game exits"  >> ${RUN_LOG}
# Stay in loop while the game is running.
while [ -n "$(pgrep -lf $GAME_EXE)" ]; do
  sleep 2
done;

echo "$GAME_EXE has exited"  >> ${RUN_LOG}

# Shut down the Windows Steam client.
echo "Shutting down Steam"  >> ${RUN_LOG}
if [ -n "$(pgrep -lf Steam\.exe)" ]; then
  "$WINEVERSION/bin/wine" $VIRT_DESK "$STEAM_DIR/Steam.exe" -shutdown

  # Wait for Steam client to close completely.
  while pgrep -lf "Steam\.exe"; do
    sleep 2
  done;
fi;

echo "Steam shutdown"  >> ${RUN_LOG}

echo "Killing wine server"  >> ${RUN_LOG}
# Kill Wine server so Steam will properly return to the library interface.
"$WINEVERSION/bin/wineserver" -k

if [[ "${enable_gamepad_support}" == "1" ]]; then

	echo "Shutting down gamepad support"
	pkill xboxdrv

fi

cat<<- EOF>> ${RUN_LOG}

-------------- End log ---------------
    $DATE    
--------------------------------------

EOF
