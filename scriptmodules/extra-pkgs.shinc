# -----------------------------------------------------------------------
# Author: 		Michael DeGuzis
# Git:		      	https://github.com/ProfessorKaos64/SteamOS-Tools
# Scipt Name:	  	extra-pkgs.
# Script Ver:	  	1.8.0
# Description:		Module for installing useful pacakges otherwise not 
#			found in The Debian jessie repositories directly.
#	
# Usage:	      	n/a , module
# -----------------------------------------------------------------------

ep_pkg_cleanup()
{
	#####################################################
	# cleanup package remenants and other files
	#####################################################
	
	echo -e "\n==> Cleaning up packages, files, and other garbage\n"
	sleep 2s
	
	# Attempt to fix any missing packages 
	# This is until all deps are acconted for
	sudo apt-get install -f

	# remove leftover files
	rm -rf ./*.deb* 
	rm -rf /tmp/*.deb*
	rm -f "$temp_file"
	
	rm -f ./*.Release.key*
	rm -f /tmp/*.Release.key*
	
	# autoremove unecessary packages
	sudo apt-get autoremove
}

ep_install_chrome()
{

	# See: https://github.com/ValveSoftware/SteamOS/wiki/Installing-Google-Chrome-for-Netflix

	echo -e "\n==> Installing Chrome from automated script...\n"
	sleep 2s
	
	###############################	
	# set vars
	###############################

	pkg_type=""
	install_dir="$HOME/Downloads/Chrome"
	
	# set external Deb repo required flag
	export deb_repo_name="jessie.list"
	export deb_repo_req="yes"
	# Eval requirements
	"${SCRIPTDIR}/utilities/check_repo_req.sh"
	
	# create and enter build dir
	if [[ -d "$install_dir" ]]; then
		echo -e "\n==INFO==\nChrome download DIR found"
	else
		echo -e "\n==INFO==\nChrome download DIR not found, creating...\n"
		sleep 1s
		mkdir -p "$install_dir"
	fi
	
	cd "$install_dir"
	
	###############################
	# Plugins such as gnash?
	###############################
	
	# TODO
	
	# set multiflag
	multi="n"
	
	# test if user requests it
	if [[ "${OPTIONS}" == "test" ]]; then
		# go to test function
		ep_test_deb
		exit
	fi
	
	###############################	
	# install google-chrome-stable
	###############################
	
	echo -e "\n==> Installing core package 'google-chrome-stable'\n"
	sleep 2s
	
	# download
	wget -O google-chrome-stable_current_amd64.deb \
	"https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb"
	
	# install
	echo "y" | sudo gdebi google-chrome-stable_current_amd64.deb

	# back out of installdir
	if [[ -d "${SCRIPTDIR}" ]]; then
		cd "${SCRIPTDIR}"
	else
		# attempt to use default DIR
		cd "/home/desktop/SteamOS-Tools/"
	fi
	
	###############################	
	# Cleanup
	###############################

	ep_pkg_cleanup

}

ep_install_chromium_dev()
{

	# TODO with widevine support
	# See: https://launchpad.net/~saiarcot895/+archive/ubuntu/chromium-dev
	
	# Install chromium-dev from packages.libregeek.org
	# Package is currently only in brewmaster_testing
	sudo apt-get install chromium-browser
	
	# Apply widevine libraries for Netflix support
	sudo cp "http://libregeek.org/SteamOS-Extra/browsers/chromium-supplemental/libwidevinecdmadapter.so" "/usr/lib/chromium-browser/"
	sudo cp "http://libregeek.org/SteamOS-Extra/browsers/chromium-supplemental/libwidevinecdm.so" "/usr/lib/chromium-browser/"
	
	# Advise user how to configure
	cat <<-EOF
	-------------------------------------------------------
	Summary
	-------------------------------------------------------
	1. Restart Chromium.
	2. Enter 'chrome://plugins' in the URL bar and ENTER
	3. Verify that the Widevine plugin is listed there.
	
	EOF
}

ep_install_gameplay_recording()
{

	#####################################################
	# Gameplay video recording
	#####################################################
	# See/Source: goo.gl/pi24cK [Steam Community]

	echo -e "\n==> Installing gameplay recording capability..."
	sleep 2s

	############################################
	# Prerequisite packages
	############################################
	
	echo -e "\n==> Checking for prerequisite packages\n"
	sleep 0.5s
	
	sudo apt-get install libav-tools libx264-dev
	
	############################################
	# Required files
	############################################
	
	echo -e "\n==> Adding required files"
	sleep 0.5s
	
	# Pull in files for recording from cfgs/recording

	sudo cp "${SCRIPTDIR}/utilities/steamos-record.sh" "/usr/local/bin"

	############################################
	# Configure
	############################################

	echo -e "\n==> Configuring\n"
	sleep 0.5s
	
	sudo chmod +x "/usr/local/bin/steamos-record.sh"
	
	############################################
	# Advise user
	############################################

	#####################################################
	# Usage
	#####################################################
	

}

ep_install_itchio()
{
	
	# Until the build script is worked out source the latest deb from the github release page
	# When that is done, this module can be retired, as work here can be merged into the package
	
	# Install pre-req packages
	
	echo -e "Installing prerequisite packages\n"
	sudo apt-get install -y --force-yes xserver-xephyr
	
	# Install itchio
	
	echo -e "Installing Itch.io client\n"
	wget -P /tmp "https://github.com/itchio/itch/releases/download/v0.11.3/itch_0.11.3_amd64.deb"
	sudo gdebi "/tmp/itch_0.11.3_amd64.deb"
	rm -f "/tmp/itch_0.11.3_amd64.deb"
	
	# copy desktop and launcher files to appropriate locations
	
	sudo cp "${SCRIPTDIR}/cfgs/desktop-files/itchio.desktop" "/usr/share/applications"
	sudo cp "${SCRIPTDIR}/launchers/itchio-launcher" "/usr/bin/"
	
	# launcher is already exec set, but ensure it is anyway
	
	sudo chmod +x "/usr/bin/itchio-launcher"
	
	echo -e "\nItch.io's content delivery client should now be available as a non-Steam shortcut\n"
	
}

ep_install_lutris()
{
	
	# NOTE!
	# This package is now in the libregeek package pool
	# The information below is for historical purposes only!
	
	echo -e "\n==> Determining latest release package from lutris.net\n"
	# grab latest release intelligently (should result in lutris_x.x.x.x_all.deb)
	PKG_FILENAME=$(curl https://lutris.net/downloads/ | awk '/deb/ {print $2}' | \
	cut -d'/' -f 5 | grep lutris | sed "s|'>lutris_[0-9].[0-9].[0-9].[0-9]_all.deb<||g")
	
}

ep_install_retroarch()
{

	echo -e "\n==> Installing Retroarch and its associated libretro cores Home from automated script\n"
	sleep 2s
	
	############################
	# Install packages
	############################
	
	# packaged now at packages.libregeek.org
	# A user could install these out of the script and forgoe this post install configuration
	
	sudo apt-get install -y --force-yes samba retroarch retroarch-assets \
	retroarch-joypad-autoconfig libretro-* 
	
	# only post install configuration is needed
  
	#######################################
	# Post configuration
	#######################################
  	
  	echo -e "\n==> Proceeding to Retroarch post configuration for SteamOS"
	sleep 2s
  	
  	# Run post configuration for common configuration
  	rpc_configure_common
  	
  	# cleanup
	ep_pkg_cleanup
  
}

ep_install_xb360_bindings()
{

	# NOTE!
	# The information below is left for legacy information ONLY
	
	echo ""
	#####################################################
	# VaporOS bindings (controller shortcuts)
	# !! Some issues, needs looked at, repacked maybe !!
	#####################################################
	# FPS + more binds from VaporOS 2
	# For bindings, see: /etc/actkbd-steamos-controller.conf
	
	###############################
	# issue warning
	###############################

	clear
	
	cat <<-EOF
	##########################################################
	Warning:
	##########################################################"
	Please be advised this deb package overwrites the
	custom Xbox 360 controller mapps in the file
	'/etc/actkbd-steamos-controller.conf'
	
	It is advised to install the gameplay-recording
	module before running this package if you intend to
	record gameplay as well. Press q to quit or any other 
	key to continue.
	
	EOF
	
	# Moved to package pool 20151212
	# brewmaster|main|vaporos-binds-xbox360_1.0_all.deb
	
}

ep_install_eval_pkg()
{

	#echo -e "\n==> Installing $PKG via external script\n"

	#####################################################
	# package eval routine using dpkg or gdebi
	#####################################################
	
	# Reset any currently set value
	PKG_OK=""
	if [[ "$multi" == "n" ]]; then
		# prcess only packages that are specifed by themselves
		PKG_OK=$(dpkg-query -W --showformat='${Status}\n' $PKG | grep "install ok installed" 2> /dev/null)
	fi
	
	# check and process for multiple debs
	if [[ "$multi" == "y" ]]; then
	
		# create and change to tmp install dir
		mkdir -p "/tmp/deb-install-tmp"	
		cd "/tmp/deb-install-tmp"
		
		# Download files recursively form base URL folder, skip index.html
		# See: http://stackoverflow.com/a/5335576
		
		# Accept only deb, no host DIRs, cut extra DIRs, do not ascend to parent DIR
		# and also avoid rebots.txt
		wget -A deb -r -nH --cut-dirs=3 --no-parent -e robots=off  "$BASE_URL"
		
		# process install in loop for each package
		FILES="*.deb"
		
		# process files
		for x in $FILES
		do
			echo "y" | sudo dpkg -i "$x" | tee "$HOME/retro-log.txt"
		done

		# remove temp install directory
		rm -rf "/tmp/deb-install-tmp"
	
	elif [[ "$multi" == "n" && "" == "$PKG_OK" ]]; then
		
		echo -e "\n==INFO==\n$PKG not found. Installing now...\n"
		sleep 2s

		# download target singluar deb
		wget -P /tmp "$BASE_URL/$PKG_FILENAME"
		# process install
		sudo gdebi "/tmp/$PKG_FILENAME"

		# cleanup
		rm -f "/tmp/$PKG_FILENAME"
		
		# cleanup leftover debs
		rm -f /tmp/*.deb*
		
		if [ $? == '0' ]; then
			echo -e "\n==INFO==\nSuccessfully installed $PKG"
			sleep 2s
		else
			echo -e "\n==INFO==\nCould not install $PKG. Exiting..."
			sleep 3s
			exit 1
		fi
	else
		echo "Checking for $PKG [OK]"
		sleep 0.5s
	fi

	# back out of any temp dir to script dir
	if [[ "${SCRIPTDIR}" != "" ]]; then
		cd "${SCRIPTDIR}"
	else
		cd "$HOME"
	fi
	
}

ep_install_eval_binary()
{

	echo -e "\n==> Installing $PKG binary via external script"

	echo ""
	#####################################################
	# Binary package eval routine
	#####################################################
	# This is mainly for binary file dumps only.
	# For example, gdrive has binaries that require no depdencies.
	# This is subject to change in the future.
	
	if [[ ! -f "$BIN_LOC" || -d "$PKG_DIR" ]]; then
		echo -e "\n==INFO==\n$PKG not found. Installing now...\n"
		sleep 2s
		wget -P /tmp "$BASE_URL/$PKG_FILENAME"
		sudo gdebi "/tmp/$PKG_FILENAME"
		# cleanup
		rm -f "/tmp/$PKG_FILENAME"
		
		if [ $? == '0' ]; then
			echo -e "\n==INFO==\nSuccessfully installed $PKG\n"
			sleep 2s
		else
			echo -e "\n==INFO==\nCould not install $PKG. Exiting..."
			sleep 3s
			exit 1
		fi
	else
		echo "Checking for $PKG [OK]"
		sleep 0.5s
	fi

}

ep_test_deb()
{

	clear
	echo -e "==> User requested testing of package routine!"
	sleep 1s
	
	###############################	
	# set vars
	###############################
	
	test_loc="/tmp/pkg-test"
	log="log.txt"
	
	###############################	
	# Pre-checks
	###############################
	
	# check that the tmpfs (/tmp) filesystem is not full.
	# if it is, instruct user they need to reboot
	
	df_chk=$(df -h /tmp | grep "[0-9]%" | cut -c 34-37)
	
	if [[ "$df_chk" == "100%" ]]; then
		echo -e "\n==WARNING!==\nThe tempfs temp file system in /tmp is full!"
		echo -e "Please issue 'sudo reboot' to clear this when possible! Exiting in..."
		echo -e "\n5" && sleep 1s
		echo "4" && sleep 1s
		echo "3" && sleep 1s
		echo "2" && sleep 1s
		echo -e "1\n" && sleep 1s
		exit
	else
		# output small reminder
		echo -e "\n==INFO==\nNotice: tmpfs (/tmp) usage is at: $df_chk\n"
		sleep 3s
	fi
	
	###############################	
	# Commence test
	###############################

	# start testing if eval
	if [[ "$pkg_type" == "deb" ]]; then
		
		# TESTING ONLY - download all netflix-dekstop files from libregeek
		# After download, install $pkg, and remove it.
		
		# test for dir and create/remove
		if [[ -d "$test_loc" ]]; then
			# remove
			rm -rf "$test_loc"
			# recreate
			mkdir -p "$test_loc"
		else
			# create
			mkdir -p "$test_loc"
		fi
		
		cd "$test_loc"
		# check for multiple debs for install
		if [[ "$multi" == "y" ]]; then
		
			# Download files recursively form base URL folder, skip index.html
			# See: http://stackoverflow.com/a/5335576
			
			# Accept only deb, no host DIRs, cut extra DIRs, do not ascend to parent DIR
			# and also avoid rebots.txt
			wget -A deb -r -nH --cut-dirs=3 --no-parent -e robots=off  "$BASE_URL"
			
		elif [[ "$multi" == "n" ]]; then
		
			# download target singluar deb
			wget "$BASE_URL/$PKG_FILENAME"

		fi
		
		echo -e "\n==> Listing downloaded pkgs in $test_loc\n"
		sleep 2s
		ls "$test_loc" | less
		
		# set pkg
		sleep 0.5s
		echo ""
		read -ep "Enter Pkg to test >> " PKG
		
		# isntall 
		echo -e "\n==> Attempting install of deb pkg $PKG\n"
		sleep 2s
		sudo dpkg -i "$PKG" | tee pkg_test_results.txt
		
		echo -e "\n==> Continuing to removal...\n" 
		sleep 1s
	
		# remove pkg and pkg_test_results.txt log
		# This var is based on the last cached pkg installed
		
		dpkg_remove_tmp=$(ls -tl "/var/lib/dpkg/info" | head -2 | awk '{print $9}' | grep .list)
		echo "$dpkg_remove_tmp" > temp.txt
		
		#remove .list suffix 
		sed -i "s|.list||g" temp.txt
		dpkg_remove_tmp=$(cat temp.txt)

		echo -e "\n==> Purging test package $PKG\n"
		sleep 2s
		sudo dpkg --purge "$dpkg_remove_tmp"

		# review
		echo -e "\n==> End of test cycle. Exiting. Please review $log\n"
		sleep 2s
		
	else
		# Not yet implemented
		echo -e "\nTesting function for this package not yet implemented\n"
		sleep 2s
		exit
		
	# end testing if eval
	fi
	
}

ep_test_opts()
{

	# simple echo of passed opts for testing only
	echo "opts received: "
	echo -e "options : ${OPTIONS}"
	echo "Software type : $type"
	echo "Extra opts : $extra_opts"
	echo -e "Availble custom pkg list 2: \n"
	cat custom-pkg.txt
	sleep 50s
	exit
}
